# -*- coding: utf-8 -*-
"""ADS Exp 7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DR-q77T4krQ5ncz-PWNcIr-jZ96djF8T
"""

import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")

import pandas as pd
df = pd.read_csv('ADS_dataset.csv')

df = df.fillna(df.mean())

df.head()

"""**Distplot**"""

sns.distplot(df['MinTemp'])
plt.xlabel('MinTemp')
plt.ylabel('Density')
plt.show()

"""**Boxplot / Whisker plot**"""

plt.boxplot(df['MinTemp'], vert=False)
plt.xlabel("MinTemp")
plt.show()

"""**Scatter plot**"""

plt.scatter(df['MinTemp'],df['Rainfall'])
plt.xlabel('MinTemp')
plt.ylabel('Rainfall')
plt.show()

"""**Distance based outlier detection: K-NN**"""

from sklearn.neighbors import NearestNeighbors
import numpy as np

X = df[['MinTemp','Rainfall']].values

# instantiate model
nbrs = NearestNeighbors(n_neighbors = 3)
# fit model
nbrs.fit(X)

# distances and indexes of k-neaighbors from model outputs
distances, indexes = nbrs.kneighbors(X)

# plot mean of k-distances of each observation
plt.plot(distances.mean(axis =1))

# visually determine cutoff values > 10
outlier_index = np.where(distances.mean(axis = 1) > 10)
outlier_index

# filter outlier values
outlier_values = df[['MinTemp','Rainfall']].iloc[outlier_index]
outlier_values

# plot data
  plt.scatter(df["MinTemp"], df["Rainfall"], color = "b")
  # plot outlier values
  plt.scatter(outlier_values["MinTemp"], outlier_values["Rainfall"], color = "r")

"""**Density based outlier detection: LOF**


"""

from sklearn.neighbors import LocalOutlierFactor

# Load dataset
X = df[['MinTemp','Rainfall']].values

# Fit LOF model
n_neighbors = 3
contamination = 0.00001
lof = LocalOutlierFactor(n_neighbors=n_neighbors, contamination=contamination)
y_pred = lof.fit_predict(X)

# Identify outliers
outliers = np.where(y_pred == -1)[0]
print(outliers)

# filter outlier values
outlier_values = df[['MinTemp','Rainfall']].iloc[outliers]
outlier_values

# plot data
plt.scatter(df["MinTemp"], df["Rainfall"], color = "b")
# plot outlier values
plt.scatter(outlier_values["MinTemp"], outlier_values["Rainfall"], color = "r")

"""**Remove outliers using trimming and capping (Winsorization)**

Plot the distribution plot
"""

sns.distplot(df['MinTemp'])

"""Plot the box-plot"""

sns.boxplot(df['MinTemp'])

""" Finding the upper and lower limits"""

upper_limit = df['MinTemp'].quantile(0.99)
lower_limit = df['MinTemp'].quantile(0.01)
print(lower_limit,upper_limit)

"""Apply trimming"""

new_df = df[(df['MinTemp'] <= 25.7) & (df['MinTemp'] >= -1.8)]
new_df['MinTemp'].head()

"""Compare the distribution and box-plot after trimming"""

sns.distplot(new_df['MinTemp'])

sns.boxplot(new_df['MinTemp'])

"""Apply Capping (Winsorization)"""

df['MinTemp'] = np.where(df['MinTemp'] >= upper_limit,upper_limit,np.where(df['MinTemp'] <= lower_limit, lower_limit, df['MinTemp']))

"""**Compare the distribution and box-plot after capping**"""

sns.distplot(df['MinTemp'])

sns.boxplot(df['MinTemp'])